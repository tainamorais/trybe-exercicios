npm init -y


02. O pr√≥ximo passo √© adicionar o suporte ao TypeScript ao nosso projeto, para isso vamos instalar o pacote npm do TypeScript como depend√™ncia de desenvolvimento do nosso projeto. Lembrando que em produ√ß√£o sempre iremos usar o c√≥digo compilado de TypeScript para JavaScript, por isso utilizamos como depend√™ncia de desenvolvimento.
npm install -D -E typescript@4.4.4


03. Agora vamos criar nosso arquivo tsconfig.json com a seguinte configura√ß√£o:
touch tsconfig.json


04. Nosso pr√≥ximo passo ser√° instalar como depend√™ncia de desenvolvimento o pacote npm de declara√ß√µes de tipos para os m√≥dulos padr√µes do Node.
npm install -D -E @types/node@16.18.23


05. Por √∫ltimo vamos instalar o ts-node-dev, que √© um pacote de utilit√°rios que vai nos ajudar a executar o servidor de desenvolvimento, escrito em TypeScript, diretamente no terminal, sem necessidade de compilarmos o c√≥digo em JavaScript, al√©m de reiniciar o servidor a cada altera√ß√£o que fizermos, sem a necessidade de encerrarmos o processo e o iniciarmos novamente.
npm install -D -E ts-node-dev@1.1

OBS:
√â muito importante entendermos o porqu√™ da instala√ß√£o de cada um desses pacotes. J√° nas nossas pr√≥ximas configura√ß√µes de projetos Node + TypeScript, podemos fazer todas as instala√ß√µes em um √∫nico comando:
npm install -D -E typescript@4.4.4 @types/node@16.18.23 ts-node-dev@1.1


06. Vamos agora instalar as nossas depend√™ncias necess√°rias para iniciarmos nossa aplica√ß√£o. Primeiro instalamos o pacote do Express:
npm install express@4.17


07. E posteriormente instalamos o pacote npm de declara√ß√µes de tipos do Express:
npm install -D @types/express@4.17


08. Vamos criar um arquivo com os c√≥digos de status das respostas http que ser√£o utilizados na aplica√ß√£o de exemplo desta aula. O arquivo ser√° nomeado statusCodes.ts.
touch statusCodes.ts

OBS: Vamos criar nesse arquivo um objeto respons√°vel por identificar a numera√ß√£o relativa √†s respostas http:


09. Agora vamos criar a nossa aplica√ß√£o Express. Para isso, crie um arquivo chamado index.ts na raiz do diret√≥rio do projeto com o seguinte conte√∫do:
touch index.ts


10. Para termos certeza que esse c√≥digo funciona, vamos criar alguns scripts no nosso package.json e rodar a aplica√ß√£o:
...
"scripts": {
    "start": "npm run build && node ./dist/index.js",
    "dev": "tsnd index.ts",
    "build": "tsc"
 },
...

OBS: Scripts:

start: executa o build da aplica√ß√£o e depois roda o arquivo compilado dentro da pasta dist;
dev: executa a aplica√ß√£o em modo de desenvolvimento utilizando o ts-node-dev;
build: executa a compila√ß√£o do projeto utilizando o TSC.


11. Agora vamos executar a aplica√ß√£o utilizando o script start:
npm start

OBS. Ao acessarmos no nosso navegador o caminho http://localhost:8000/ conseguimos ver a mensagem da nossa rota / : ‚ÄúExpress + TypeScript‚Äù.

12. Al√©m disso, vamos instalar uma lib que faz o tratamento de erros disparar diretamente o middleware de erro sem a necessidade de colocar try/catch ao longo do seu c√≥digo. Essa lib √© a express-async-errors.
npm install express-async-errors@3.1

13. Para nosso setup ficar 100% vamos instalar mais duas libs que usaremos um pouco mais a frente. Elas nos ajudar√£o a disparar erros espec√≠ficos para serem tratados no middleware de erro.
npm install restify-errors@8.0 @types/restify-errors@4.3



OBS. Ufa! Agora sim! Com o setup finalizado, vamos come√ßar a implementar nosso CRUD.

Dando continuidade √† nossa aplica√ß√£o vamos criar um CRUD de livros üìö. Primeiramente criaremos uma interface para representar um livro no nosso sistema. Ela ir√° possuir as seguintes propriedades:

id: A chave prim√°ria da tabela. Como √© um campo que n√£o ser√° obrigat√≥rio, vamos adicion√°-la como um atributo opcional.
title: O t√≠tulo do livro;
price: O pre√ßo de venda do livro;
author: O nome do autor do livro;
isbn: O registro ISBN do livro.












npm start