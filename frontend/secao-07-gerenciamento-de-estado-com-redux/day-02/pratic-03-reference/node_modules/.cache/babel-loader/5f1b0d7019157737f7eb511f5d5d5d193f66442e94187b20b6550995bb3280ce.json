{"ast":null,"code":"var _jsxFileName = \"/home/tainafms/Documentos/Trybe/repo-git-trybe/trybe-exercicios/frontend/secao-07-gerenciamento-de-estado-com-redux/day-02/pratic-03/src/components/FormResult.jsx\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux'; // usado para os componentes que lerão o estado\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass FormResult extends Component {\n  render() {\n    const {\n      username,\n      userpreferences\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Nome: \", username.name, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 9,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Cor favorita: \", userpreferences.favoriteColor]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Fruta favorita: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 7\n    }, this);\n  }\n}\n\n// função que faz ler o estado global é o mapStateToProps\n// ele lê o estado global e trnasforma em props\n// sempre é state\n// depois é o nome do reducer que você quer\n// depois verifica as chaves que o compõe até chegar no valor desejado\nconst mapStateToProps = state => ({\n  username: state.formReducer.username,\n  userpreferences: state.formReducer.userpreferences\n});\nexport default connect(mapStateToProps)(FormResult);","map":{"version":3,"names":["React","Component","connect","FormResult","render","username","userpreferences","props","name","favoriteColor","mapStateToProps","state","formReducer"],"sources":["/home/tainafms/Documentos/Trybe/repo-git-trybe/trybe-exercicios/frontend/secao-07-gerenciamento-de-estado-com-redux/day-02/pratic-03/src/components/FormResult.jsx"],"sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux'; // usado para os componentes que lerão o estado\n\nclass FormResult extends Component {\n  render() {\n    const { username, userpreferences } = this.props;\n    return (\n      <div>\n        <p>Nome: {username.name} </p>\n        <p>Cor favorita: {userpreferences.favoriteColor}</p>\n        <p>Fruta favorita: </p>\n      </div>\n    )\n  }\n}\n\n// função que faz ler o estado global é o mapStateToProps\n// ele lê o estado global e trnasforma em props\n// sempre é state\n// depois é o nome do reducer que você quer\n// depois verifica as chaves que o compõe até chegar no valor desejado\nconst mapStateToProps = (state) => ({\n  username: state.formReducer.username,\n  userpreferences: state.formReducer.userpreferences\n})\n\nexport default connect(mapStateToProps)(FormResult)\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,OAAO,QAAQ,aAAa,CAAC,CAAC;AAAA;AAEvC,MAAMC,UAAU,SAASF,SAAS,CAAC;EACjCG,MAAM,GAAG;IACP,MAAM;MAAEC,QAAQ;MAAEC;IAAgB,CAAC,GAAG,IAAI,CAACC,KAAK;IAChD,oBACE;MAAA,wBACE;QAAA,qBAAUF,QAAQ,CAACG,IAAI;MAAA;QAAA;QAAA;QAAA;MAAA,QAAM,eAC7B;QAAA,6BAAkBF,eAAe,CAACG,aAAa;MAAA;QAAA;QAAA;QAAA;MAAA,QAAK,eACpD;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAuB;IAAA;MAAA;MAAA;MAAA;IAAA,QACnB;EAEV;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAMC,eAAe,GAAIC,KAAK,KAAM;EAClCN,QAAQ,EAAEM,KAAK,CAACC,WAAW,CAACP,QAAQ;EACpCC,eAAe,EAAEK,KAAK,CAACC,WAAW,CAACN;AACrC,CAAC,CAAC;AAEF,eAAeJ,OAAO,CAACQ,eAAe,CAAC,CAACP,UAAU,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}